kaggleÂ´s churn data is used for this homework.
It can be found here: https://www.kaggle.com/datasets/blastchar/telco-customer-churn/data

The desicion tree requires numbers as input. Meaning values like male/female or yes/no
need to be translated into 1/2.
# replace Male/female with 0/1 for desicion tree
churn_df["gender"] = churn_df["gender"].replace(["Male","Female"],[0,1])

# replace yes/no with 0/1 for desicion tree
churn_df = churn_df.replace(["No","Yes"],[0,1])

tip: to generate a 2x2 matrix with the frequencies for 2 coloumns use crosstab-function.
# generate a 2x2 frequency table for
partner_churn_table = pd.crosstab(churn_df["Partner"],churn_df["Churn"])

plotting: a plot is only shown when you call it with plt.show() (need matplotlib).
even if its a panda plot. Otherwise everything is saved to memory but not shown.

Total Charges are not numeric and have a blank space in the values " ".
The blank space makes transforming the data values into float difficult.
So we have to remove the " " and replace them with nothing/NAn.
# Replace spaces with NaN in the "TotalCharges" column
churn_df["TotalCharges"] = churn_df["TotalCharges"].replace(' ', np.nan)
np.nan in this case introduces NAn.
we change datatype with .astype -> # attempt to convert the column to float
churn_df["TotalCharges"] = churn_df["TotalCharges"].astype(float)
and remove the nan introduced by np.nan

churn csv is suppose to be split into training and test data sets with 80/20 split
80 % training
20 % test
I use the following code:

# divide into training and test data: 80/20 %
churnx_train, churnx_test,churny_train, churny_test  = train_test_split(
    churn_df.drop("Churn",axis=1),churn_df["Churn"],test_size=0.2,random_state=0
)

churnx_train, churnx_test, churny_train, and churny_test are variables where the training and test data will be stored.
These variables are used to store the following data:

churnx_train: This represents the features/data (independent variables) of the training dataset.
churnx_test: These are the features/data of the test dataset.
churny_train: This typically represents the target variable/labels (the variable you're trying to predict) of the training dataset.
churny_test: This is the target variable/labels of the test dataset.

churn_df.drop("Churn", axis=1): This is the DataFrame containing the features (independent variables) of your dataset.
The drop method with axis=1 is used to remove the "Churn" column,"Churn" is the target variable that you want to predict,
and the rest of the columns are features.

churn_df["Churn"]: This is the Series or DataFrame containing the target variable you want to predict, in this case, "Churn."

test_size=0.2: This parameter specifies that you want to allocate 20% of the data to the test set,
and the remaining 80% will be used for training the machine learning model.

random_state=0: This is used to seed the random number generator, ensuring that the split is reproducible.
Setting it to a specific number, like 0, ensures that every time you run this code, you'll get the same split if the dataset and parameters remain the same.
set.seed() in R.

Table-Function (R) in python is .value_counts()
> print(churn_df["InternetService"].value_counts())
output:
InternetService
Fiber optic    3096
DSL            2416
No             1520
Name: count, dtype: int64
.unique returns unique values in a coloumn
>print(churn_df["InternetService"].unique())
['DSL' 'Fiber optic' 'No']

I had multiple coloumns with character datatype that i wanted
to change into integer. I need them to be integer for the decisiontree
which takes only integer values as input.
Because I donÂ´t want to type .replace for all 21 coloumns,
I created a function which takes all unique character values and turns them into integer.
def convert_column_to_integers(df, column_name):
    """

    :param df: dataframe with coloumn containing characters
    :param column_name: coloumn with characters
    :return: dataframe with characters in coloumn being changed to integer.
    """
    unique_values = df[column_name].unique()
    value_to_integer_mapping = {value: i for i, value in enumerate(unique_values)}
    df[column_name] = df[column_name].map(value_to_integer_mapping)
> see convert_coloumns_to_integers.py

second function converts every coloumns with characters to integer:
def convert_string_columns_to_integers(df):
    """
    convert whole dataframe, not only single coloumns
    :param df:  dataframe
    :return: dataframe with characters(object-type) changes to integer.
    """
    for column_name in df.columns:
        if df[column_name].dtype == 'object':
            convert_column_to_integers(df, column_name)


Tip: Datatypes in python.
The Debugger shows different datatypes for dataframes.
Here is the meaning
> Object - String/ character
> Integer64 - whole number 1
> float64 - floatnumbers 1,5